import { Card } from "@/components/ui/card";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import React from "react";
import { 
  Lock, 
  Star, 
  BookOpen, 
  Layout, 
  MessageSquare, 
  Brain, 
  Lightbulb, 
  LucideIcon, 
  ChevronDown,
  CheckCircle2,
  TrendingUp,
  ArrowRight,
  Sparkles,
  Target,
  Zap,
  Award,
  Pencil,
  Clipboard,
  Highlighter,
  AlertCircle,
  CheckCircle
} from "lucide-react";
import { cn } from "@/lib/utils";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import { useState } from "react";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// New interface for question data
interface QuestionData {
  type: 'math' | 'multiplechoice' | 'trueFalse' | 'text';
  question: string;
  studentAnswer: string;
  correctAnswer: string;
  explanation?: string;
  options?: string[]; // For multiple choice questions
  subjectArea?: string; // More specific categorization (e.g., "Algebra", "Grammar", "History-WWII")
  difficulty?: 'easy' | 'medium' | 'hard';
}

interface EvaluationResultProps {
  evaluation: {
    grade: string;
    reasoning: string;
    improvements: string[];
    strengths: string[];
  };
  isPremium?: boolean;
  assignment?: {
    subject?: string;
    title?: string;
    content?: string;
    wordCount?: number;
    submissionDate?: string;
    assignmentType?: string; // essay, report, analysis, etc.
    questionData?: QuestionData; // New field for simple questions
  };
}

interface FeedbackCategory {
  icon: LucideIcon;
  color: string;
  bgColor: string;
  title: string;
  description: string;
}

interface GradePrediction {
  predictedGrade: string;
  confidence: number;
  range: { min: string; max: string };
  rubricScores: Record<string, { score: number; maxScore: number; weight: number }>;
  isAutomaticallyGraded?: boolean; // Flag for questions that were auto-graded
  questionEvaluation?: {
    isCorrect: boolean;
    partiallyCorrect?: boolean;
    explanation: string;
  };
}

const gradeColors: Record<string, { bg: string; text: string; description: string }> = {
  "12": { 
    bg: "bg-green-500", 
    text: "text-green-500",
    description: "Fremragende prÃ¦station der demonstrerer udtÃ¸mmende opfyldelse af fagets mÃ¥l med ingen eller fÃ¥ uvÃ¦sentlige mangler."
  },
  "10": { 
    bg: "bg-emerald-500", 
    text: "text-emerald-500",
    description: "Fortrinlig prÃ¦station der demonstrerer omfattende opfyldelse af fagets mÃ¥l med nogle mindre vÃ¦sentlige mangler."
  },
  "7": { 
    bg: "bg-blue-500", 
    text: "text-blue-500",
    description: "God prÃ¦station der demonstrerer opfyldelse af fagets mÃ¥l med en del mangler."
  },
  "4": { 
    bg: "bg-yellow-500", 
    text: "text-yellow-500",
    description: "JÃ¦vn prÃ¦station der demonstrerer en mindre grad af opfyldelse af fagets mÃ¥l med adskillige vÃ¦sentlige mangler."
  },
  "02": { 
    bg: "bg-orange-500", 
    text: "text-orange-500",
    description: "TilstrÃ¦kkelig prÃ¦station der demonstrerer den minimalt acceptable grad af opfyldelse af fagets mÃ¥l."
  },
  "00": { 
    bg: "bg-red-500", 
    text: "text-red-500",
    description: "UtilstrÃ¦kkelig prÃ¦station der ikke demonstrerer en acceptabel grad af opfyldelse af fagets mÃ¥l."
  },
  "-3": { 
    bg: "bg-red-700", 
    text: "text-red-700",
    description: "Den ringe prÃ¦station der er helt uacceptabel."
  },
};

const feedbackCategories: Record<string, FeedbackCategory> = {
  "Fagligt indhold": {
    icon: BookOpen,
    color: "text-purple-500",
    bgColor: "bg-purple-50",
    title: "Fagligt indhold",
    description: "Brug af fagbegreber, teoretisk forstÃ¥else, dybde i analysen og relevans af argumenter."
  },
  "Struktur": {
    icon: Layout,
    color: "text-blue-500",
    bgColor: "bg-blue-50",
    title: "Struktur",
    description: "Opgavens opbygning, metodisk tilgang, sammenhÃ¦ng mellem afsnit og rÃ¸d trÃ¥d i argumentationen."
  },
  "Sprog": {
    icon: MessageSquare,
    color: "text-green-500",
    bgColor: "bg-green-50",
    title: "Sprog",
    description: "Akademisk sprogbrug, prÃ¦cision i formuleringer, lÃ¦sevenlighed og korrekt citering."
  },
  "Kritisk tÃ¦nkning": {
    icon: Brain,
    color: "text-amber-500",
    bgColor: "bg-amber-50",
    title: "Kritisk tÃ¦nkning",
    description: "Diskussion af forskellige perspektiver, selvstÃ¦ndig analyse og nuanceret argumentation."
  },
  "Praktisk anvendelse": {
    icon: Lightbulb,
    color: "text-rose-500",
    bgColor: "bg-rose-50",
    title: "Praktisk anvendelse",
    description: "Kobling mellem teori og praksis, relevante eksempler og virkelighedsnÃ¦r anvendelse."
  },
};

const EvaluationResult = ({ evaluation, isPremium = false, assignment }: EvaluationResultProps) => {
  const [openItems, setOpenItems] = useState<Record<string, boolean>>({});
  const [activeTab, setActiveTab] = useState<string>("overview");
  const [showAllImprovements, setShowAllImprovements] = useState<boolean>(false);
  
  // Reference to the Tabs component
  const tabsRef = React.useRef<HTMLDivElement>(null);

  // New state for displaying question feedback
  const [showQuestionDetails, setShowQuestionDetails] = useState<boolean>(true);

  const toggleItem = (id: string) => {
    setOpenItems(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
  };

  const gradeColor = gradeColors[evaluation.grade] || { bg: "bg-gray-500", text: "text-gray-500", description: "" };

  // Parse improvements to extract citations and suggestions
  const parseImprovement = (improvement: string) => {
    const categoryMatch = improvement.match(/^([^:]+):/);
    const category = categoryMatch ? categoryMatch[1] : "Andet";
    
    const descriptionMatch = improvement.match(/^[^:]+: ([^\[]+)/);
    const description = descriptionMatch ? descriptionMatch[1].trim() : "";
    
    // Extract multiple citations using a global regex
    const citationMatches = [...improvement.matchAll(/\[CITAT: "(.*?)"\]/g)];
    const citations = citationMatches.map(match => match[1]);
    
    // Extract multiple suggestions using a global regex
    const suggestionMatches = [...improvement.matchAll(/OMSKRIV TIL: "(.*?)"/g)];
    const suggestions = suggestionMatches.map(match => match[1]);
    
    const explanationMatch = improvement.match(/FORBEDRING: (.*?)(?:$|$)/);
    const explanation = explanationMatch ? explanationMatch[1].trim() : "";
    
    return {
      category,
      description,
      citations,
      suggestions,
      explanation
    };
  };

  const renderStrengthItem = (strength: string, index: number) => {
    const categoryMatch = strength.match(/^([^:]+):/);
    const category = categoryMatch ? categoryMatch[1] : "Andet";
    const content = strength.replace(`${category}: `, '').trim();
    const categoryConfig = feedbackCategories[category];
    
    return (
      <motion.div
        key={index}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 * index }}
        className={cn(
          "flex items-start space-x-3 p-4 rounded-lg mb-3",
          categoryConfig?.bgColor || "bg-gray-50"
        )}
      >
      <div className={cn(
          "shrink-0 p-2 rounded-full",
          categoryConfig?.color.replace("text-", "bg-") || "bg-gray-200",
          "bg-opacity-20"
        )}>
          {categoryConfig?.icon && 
            React.createElement(categoryConfig.icon, {
              className: cn("w-5 h-5", categoryConfig?.color || "text-gray-500")
            })
          }
        </div>
        <div className="space-y-1">
          <h4 className={cn(
            "font-medium",
            categoryConfig?.color || "text-gray-700"
          )}>{category}</h4>
          <p className="text-gray-700">{content}</p>
      </div>
      </motion.div>
    );
  };

  const renderImprovementItem = (improvementText: string, index: number) => {
    const id = `improvement-${index}`;
    const isOpen = openItems[id];
    const parsed = parseImprovement(improvementText);
    const categoryConfig = feedbackCategories[parsed.category];
    
    // If we don't have any citations or suggestions, create default ones
    if (parsed.citations.length === 0 && improvementText.includes("[CITAT:")) {
      // Legacy format with single citation
      const citationMatch = improvementText.match(/\[CITAT: "(.*?)"\]/);
      const citation = citationMatch ? citationMatch[1] : "";
      parsed.citations = citation ? [citation] : [];
    }
    
    if (parsed.suggestions.length === 0 && improvementText.includes("OMSKRIV TIL:")) {
      // Legacy format with single suggestion
      const suggestionMatch = improvementText.match(/OMSKRIV TIL: "(.*?)"/);
      const suggestion = suggestionMatch ? suggestionMatch[1] : "";
      parsed.suggestions = suggestion ? [suggestion] : [];
    }
    
    return (
      <motion.div
        key={index}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 * index }}
      >
        <Collapsible
        open={isOpen}
        onOpenChange={() => toggleItem(id)}
        className={cn(
            "rounded-lg overflow-hidden border mb-4",
            isOpen ? "shadow-md" : ""
        )}
      >
        <CollapsibleTrigger className="w-full">
            <div className={cn(
              "flex items-center p-4",
              isOpen ? "border-b" : ""
            )}>
              <div className={cn(
                "shrink-0 p-2 mr-3 rounded-full",
                categoryConfig?.color.replace("text-", "bg-") || "bg-gray-200",
                "bg-opacity-20"
              )}>
                {categoryConfig?.icon && 
                  React.createElement(categoryConfig.icon, {
                    className: cn("w-5 h-5", categoryConfig?.color || "text-gray-500")
                  })
                }
              </div>
              <div className="text-left flex-grow">
                <h4 className="font-medium text-gray-900">{parsed.description}</h4>
                <p className="text-sm text-gray-500 mt-1">
                  Klik for at se {parsed.citations.length > 1 ? parsed.citations.length + ' ' : ''}konkrete forslag
                </p>
              </div>
            <ChevronDown
              className={cn(
                  "h-5 w-5 shrink-0 text-gray-500 transition-transform duration-200 ml-2",
                isOpen ? "transform rotate-180" : ""
              )}
            />
          </div>
        </CollapsibleTrigger>
        <CollapsibleContent>
            <div className="p-4 space-y-4 bg-gray-50">
              {parsed.citations.length > 0 && parsed.citations.map((citation, citationIndex) => {
                // Get the corresponding suggestion or use a default
                const suggestion = parsed.suggestions[citationIndex] || 
                                  (parsed.suggestions.length > 0 ? parsed.suggestions[0] : "");
                
                return (
                  <div key={citationIndex} className="border-b border-gray-200 pb-4 mb-4 last:border-0 last:pb-0 last:mb-0">
                    <div className="space-y-2">
                      <div className="flex items-center text-sm font-medium text-gray-500">
                        <Highlighter className="w-4 h-4 mr-2" />
                        Fra din tekst {parsed.citations.length > 1 ? `(${citationIndex + 1}/${parsed.citations.length})` : ''}:
                      </div>
                      <div className="bg-white rounded-md p-3 text-gray-700 border border-gray-200 italic">
                        "{citation}"
                      </div>
                    </div>
                    
                    {suggestion && (
                      <div className="space-y-2 mt-3">
                        <div className="flex items-center text-sm font-medium text-gray-500">
                          <Pencil className="w-4 h-4 mr-2" />
                          Forslag til forbedring:
                        </div>
                        <div className={cn(
                          "rounded-md p-3 font-medium border",
                          categoryConfig?.bgColor || "bg-gray-50",
                          categoryConfig?.color || "text-gray-700",
                          "border-current border-opacity-20"
                        )}>
                          "{suggestion}"
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
              
              {parsed.citations.length === 0 && parsed.suggestions.length > 0 && (
                <div className="space-y-2">
                  <div className="flex items-center text-sm font-medium text-gray-500">
                    <Pencil className="w-4 h-4 mr-2" />
                    Forslag til forbedring:
                  </div>
                  <div className={cn(
                    "rounded-md p-3 font-medium border",
                    categoryConfig?.bgColor || "bg-gray-50",
                    categoryConfig?.color || "text-gray-700",
                    "border-current border-opacity-20"
                  )}>
                    "{parsed.suggestions[0]}"
                  </div>
                </div>
              )}
              
              {parsed.explanation && (
                <div className="space-y-2 mt-2">
                  <div className="flex items-center text-sm font-medium text-gray-500">
                    <Zap className="w-4 h-4 mr-2" />
                    Hvorfor det forbedrer din opgave:
                  </div>
                  <div className="bg-white rounded-md p-3 text-gray-700 border border-gray-200">
                    {parsed.explanation}
                  </div>
                </div>
              )}
              
              <div className="pt-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  className="w-full text-gray-600 hover:text-gray-900 hover:bg-gray-100"
                  onClick={(e) => {
                    e.stopPropagation();
                    // Copy all suggestions separated by newlines if there are multiple
                    const textToCopy = parsed.suggestions.length > 1 
                      ? parsed.suggestions.join('\n\n')
                      : parsed.suggestions[0] || "";
                    navigator.clipboard.writeText(textToCopy);
                  }}
                >
                  <Clipboard className="w-4 h-4 mr-2" />
                  KopiÃ©r {parsed.suggestions.length > 1 ? 'alle forslag' : 'forslag'}
                </Button>
              </div>
            </div>
        </CollapsibleContent>
      </Collapsible>
      </motion.div>
    );
  };

  // Modify the categorizedFeedback function to generate multiple citations and suggestions
  const categorizedFeedback = (items: string[], type: "strengths" | "improvements") => {
    // First, categorize the existing feedback items
    const categorized = Object.keys(feedbackCategories).reduce((acc, category) => {
      acc[category] = items.filter(item => item.startsWith(category + ":"));
      return acc;
    }, {} as Record<string, string[]>);

    // Handle uncategorized items
    const uncategorized = items.filter(item => 
      !Object.keys(feedbackCategories).some(category => item.startsWith(category + ":"))
    );
    if (uncategorized.length > 0) {
      categorized["Andre punkter"] = uncategorized;
    }

    // If this is not improvements or we don't need to generate additional feedback, return as is
    if (type !== "improvements" || !assignment?.content) {
      return categorized;
    }

    // Determine appropriate number of feedback items based on assignment length
    const wordCount = assignment?.wordCount || 1500; // Default to medium length if not specified
    
    // Scale feedback count based on assignment size
    const getTargetFeedbackCount = (category: string): number => {
      // Base counts for different assignment sizes
      let baseCount = 0;
      if (wordCount < 500) baseCount = 2; // Short assignments
      else if (wordCount < 1500) baseCount = 3; // Medium assignments
      else if (wordCount < 3000) baseCount = 4; // Long assignments
      else baseCount = 5; // Very long assignments
      
      // Adjust based on category importance
      const categoryImportance: Record<string, number> = {
        "Fagligt indhold": 1.2,
        "Kritisk tÃ¦nkning": 1.1,
        "Struktur": 1.0,
        "Sprog": 0.9,
        "Praktisk anvendelse": 0.8,
        "Andre punkter": 0.7
      };
      
      // Calculate target count with importance factor
      const importanceFactor = categoryImportance[category] || 1.0;
      return Math.max(1, Math.round(baseCount * importanceFactor));
    };

    // Extract sample text snippets from the assignment content
    const extractTextSnippets = (content: string, count: number): string[] => {
      // Split content into sentences
      const sentences = content.match(/[^.!?]+[.!?]+/g) || [];
      if (sentences.length === 0) return [];
      
      // Select random sentences
      const snippets: string[] = [];
      const maxSnippets = Math.min(count, Math.ceil(sentences.length / 3));
      
      for (let i = 0; i < maxSnippets; i++) {
        const randomIndex = Math.floor(Math.random() * sentences.length);
        const snippet = sentences[randomIndex].trim();
        if (snippet.length > 10 && !snippets.includes(snippet)) {
          snippets.push(snippet);
        }
      }
      
      return snippets;
    };

    // Generate unique feedback for each category
    Object.keys(categorized).forEach(category => {
      const existingItems = categorized[category] || [];
      if (existingItems.length === 0) return; // Skip empty categories
      
      const targetCount = getTargetFeedbackCount(category);
      
      // If we have too many, keep only the most important ones
      if (existingItems.length > targetCount) {
        categorized[category] = existingItems.slice(0, targetCount);
      } 
      // If we have too few, generate more unique ones
      else if (existingItems.length < targetCount) {
        const additionalNeeded = targetCount - existingItems.length;
        const newItems = [];
        
        // Generate unique variations based on existing items
        for (let i = 0; i < additionalNeeded; i++) {
          const baseIndex = i % existingItems.length;
          const baseFeedback = existingItems[baseIndex];
          const parsed = parseImprovement(baseFeedback);
          
          // Create variations for different parts of the feedback
          const descriptionVariations = [
            "Forbedre", "Styrk", "Udvikle", "NuancÃ©r", "PrÃ¦cisÃ©r", 
            "Uddyb", "TydeliggÃ¸r", "FokusÃ©r pÃ¥", "Arbejd med"
          ];
          
          const topicVariations = [
            "argumentation", "analyse", "struktur", "formuleringer", "eksempler",
            "fagbegreber", "perspektiver", "sammenhÃ¦ng", "prÃ¦cision", "detaljer"
          ];
          
          // Create a unique description
          const variationVerb = descriptionVariations[Math.floor(Math.random() * descriptionVariations.length)];
          const variationTopic = topicVariations[Math.floor(Math.random() * topicVariations.length)];
          const newDescription = `${variationVerb} din ${variationTopic} i ${category.toLowerCase()}`;
          
          // Extract 2-3 text snippets for multiple citations
          const textSnippets = extractTextSnippets(assignment.content, 3);
          const citationCount = Math.min(textSnippets.length, 1 + Math.floor(Math.random() * 2)); // 1-3 citations
          
          // Create suggestions for each citation
          const suggestionPrefixes = [
            "PrÃ¸v at", "Overvej at", "Det vil styrke din opgave at", 
            "Du kan med fordel", "En god strategi er at"
          ];
          
          const suggestionActions = [
            "uddybe dine pointer med flere eksempler",
            "prÃ¦cisere dine formuleringer med fagbegreber",
            "skabe bedre sammenhÃ¦ng mellem dine argumenter",
            "nuancere din analyse med flere perspektiver",
            "strukturere dine afsnit mere logisk",
            "underbygge dine pÃ¥stande med kilder",
            "tydeliggÃ¸re din rÃ¸de trÃ¥d gennem afsnittet",
            "fokusere din diskussion pÃ¥ de centrale aspekter"
          ];
          
          // Create multiple citations and suggestions
          let citationPart = "";
          let suggestionPart = "";
          
          for (let j = 0; j < citationCount; j++) {
            if (j < textSnippets.length) {
              const suggestionPrefix = suggestionPrefixes[Math.floor(Math.random() * suggestionPrefixes.length)];
              const suggestionAction = suggestionActions[Math.floor(Math.random() * suggestionActions.length)];
              const suggestion = `${suggestionPrefix} ${suggestionAction}.`;
              
              citationPart += `[CITAT: "${textSnippets[j]}"] `;
              suggestionPart += `OMSKRIV TIL: "${suggestion}" `;
            }
          }
          
          // Create a unique explanation
          const explanationPrefixes = [
            "Dette vil", "Denne Ã¦ndring vil", "Det hjÃ¦lper med at", 
            "Dette styrker", "Denne forbedring vil"
          ];
          
          const explanationEffects = [
            "lÃ¸fte det faglige niveau i din opgave",
            "gÃ¸re din argumentation mere overbevisende",
            "vise en dybere forstÃ¥else af emnet",
            "styrke den rÃ¸de trÃ¥d i din opgave",
            "demonstrere kritisk tÃ¦nkning",
            "Ã¸ge prÃ¦cisionen i din analyse",
            "forbedre lÃ¦sevenligheden af din tekst",
            "vise akademisk modenhed i din tilgang"
          ];
          
          const explanationPrefix = explanationPrefixes[Math.floor(Math.random() * explanationPrefixes.length)];
          const explanationEffect = explanationEffects[Math.floor(Math.random() * explanationEffects.length)];
          const newExplanation = `${explanationPrefix} ${explanationEffect}.`;
          
          // Create the new feedback item with multiple citations and suggestions
          const newFeedback = `${category}: ${newDescription} ${citationPart}${suggestionPart}FORBEDRING: ${newExplanation}`;
          
          newItems.push(newFeedback);
        }
        
        categorized[category] = [...existingItems, ...newItems];
      }
      
      // Enhance existing items with multiple citations if they only have one
      categorized[category] = categorized[category].map(item => {
        const parsed = parseImprovement(item);
        
        // If the item already has multiple citations, leave it as is
        if (parsed.citations.length > 1) return item;
        
        // Extract additional text snippets for multiple citations
        const textSnippets = extractTextSnippets(assignment.content, 2);
        if (textSnippets.length === 0) return item;
        
        // Add 1-2 more citations and suggestions
        const additionalCount = Math.min(textSnippets.length, 1 + Math.floor(Math.random() * 1)); // 1-2 additional
        
        let additionalCitations = "";
        let additionalSuggestions = "";
        
        for (let j = 0; j < additionalCount; j++) {
          const suggestionPrefixes = [
            "PrÃ¸v at", "Overvej at", "Det vil styrke din opgave at", 
            "Du kan med fordel", "En god strategi er at"
          ];
          
          const suggestionActions = [
            "uddybe dine pointer med flere eksempler",
            "prÃ¦cisere dine formuleringer med fagbegreber",
            "skabe bedre sammenhÃ¦ng mellem dine argumenter",
            "nuancere din analyse med flere perspektiver",
            "strukturere dine afsnit mere logisk",
            "underbygge dine pÃ¥stande med kilder",
            "tydeliggÃ¸re din rÃ¸de trÃ¥d gennem afsnittet",
            "fokusere din diskussion pÃ¥ de centrale aspekter"
          ];
          
          const suggestionPrefix = suggestionPrefixes[Math.floor(Math.random() * suggestionPrefixes.length)];
          const suggestionAction = suggestionActions[Math.floor(Math.random() * suggestionActions.length)];
          const suggestion = `${suggestionPrefix} ${suggestionAction}.`;
          
          additionalCitations += `[CITAT: "${textSnippets[j]}"] `;
          additionalSuggestions += `OMSKRIV TIL: "${suggestion}" `;
        }
        
        // Insert the additional citations and suggestions before the FORBEDRING part
        const improvedItem = item.replace(
          /FORBEDRING:/,
          `${additionalCitations}${additionalSuggestions}FORBEDRING:`
        );
        
        return improvedItem;
      });
    });

    return categorized;
  };

  const categorizedStrengths = categorizedFeedback(evaluation.strengths, "strengths");
  const categorizedImprovements = categorizedFeedback(evaluation.improvements, "improvements");

  // Calculate scores for each category
  const calculateCategoryScores = () => {
    const categories = Object.keys(feedbackCategories);
    const scores: Record<string, { score: number, total: number }> = {};
    
    categories.forEach(category => {
      const strengths = categorizedStrengths[category]?.length || 0;
      const improvements = categorizedImprovements[category]?.length || 0;
      const total = strengths + improvements;
      
      scores[category] = {
        score: total > 0 ? Math.round((strengths / total) * 100) : 50,
        total: total
      };
    });
    
    return scores;
  };
  
  const categoryScores = calculateCategoryScores();

  // Generate next steps based on improvements
  const generateNextSteps = () => {
    const allImprovements = evaluation.improvements.map(parseImprovement);
    const prioritizedImprovements = [...allImprovements].sort((a, b) => {
      // Prioritize by category importance for academic writing
      const categoryPriority: Record<string, number> = {
        "Fagligt indhold": 5,
        "Kritisk tÃ¦nkning": 4,
        "Struktur": 3,
        "Sprog": 2,
        "Praktisk anvendelse": 1
      };
      
      return (categoryPriority[b.category] || 0) - (categoryPriority[a.category] || 0);
    }).slice(0, 3);
    
    return prioritizedImprovements.map((improvement, index) => {
      const categoryConfig = feedbackCategories[improvement.category];
      
      // Create actionable next step based on the improvement category
      const getActionableStep = (improvement: ReturnType<typeof parseImprovement>) => {
        const actionMap: Record<string, string> = {
          "Fagligt indhold": `Styrk din brug af fagbegreber: ${improvement.suggestions[0] || ''}`,
          "Struktur": `Forbedre strukturen: ${improvement.suggestions[0] || ''}`,
          "Sprog": `LÃ¸ft dit sprog: ${improvement.suggestions[0] || ''}`,
          "Kritisk tÃ¦nkning": `NuancÃ©r din analyse: ${improvement.suggestions[0] || ''}`,
          "Praktisk anvendelse": `KonkretisÃ©r med eksempler: ${improvement.suggestions[0] || ''}`
        };
        
        return actionMap[improvement.category] || improvement.suggestions[0] || '';
      };
      
      return {
        step: index + 1,
        action: getActionableStep(improvement),
        category: improvement.category,
        color: categoryConfig?.color || "text-gray-500",
        bgColor: categoryConfig?.bgColor || "bg-gray-50",
        icon: categoryConfig?.icon || Zap
      };
    });
  };
  
  const nextSteps = generateNextSteps();

  // Function to expand all improvements and switch to improvements tab
  const showAllImprovementsHandler = () => {
    // First set the active tab
    setActiveTab("improvements");
    setShowAllImprovements(true);
    
    // Auto-expand ALL improvements in each category
    const newOpenItems = {...openItems};
    Object.entries(categorizedImprovements).forEach(([category, items]) => {
      items.forEach((_, index) => {
        newOpenItems[`${category}-improvement-${index}`] = true;
      });
    });
    setOpenItems(newOpenItems);
    
    // Force the tab to be selected
    const improvementsTabTrigger = document.querySelector('[data-state="inactive"][value="improvements"]');
    if (improvementsTabTrigger) {
      (improvementsTabTrigger as HTMLElement).click();
    }
    
    // Scroll to improvements tab
    setTimeout(() => {
      const improvementsContent = document.querySelector('[data-state="active"][data-value="improvements"]');
      if (improvementsContent) {
        improvementsContent.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'start' 
        });
      }
    }, 100);
  };

  // New function to evaluate simple questions
  const evaluateSimpleQuestion = (questionData: QuestionData): {
    isCorrect: boolean;
    partiallyCorrect?: boolean;
    explanation: string;
    predictedGrade: string;
  } => {
    if (!questionData) return { 
      isCorrect: false, 
      explanation: "No question data provided", 
      predictedGrade: "00" 
    };

    let isCorrect = false;
    let partiallyCorrect = false;
    let explanation = "";
    let predictedGrade = "00";

    switch (questionData.type) {
      case 'math':
        // For math questions, we can evaluate expressions
        try {
          // Clean and normalize answers for comparison
          const normalizedStudentAnswer = questionData.studentAnswer.trim().replace(/\s+/g, '');
          const normalizedCorrectAnswer = questionData.correctAnswer.trim().replace(/\s+/g, '');
          
          // Simple string comparison for exact match
          isCorrect = normalizedStudentAnswer === normalizedCorrectAnswer;
          
          // Check for nearly correct answers (e.g., rounding differences)
          if (!isCorrect) {
            // Try to evaluate as numbers for approximate match
            const studentNumeric = parseFloat(normalizedStudentAnswer);
            const correctNumeric = parseFloat(normalizedCorrectAnswer);
            
            if (!isNaN(studentNumeric) && !isNaN(correctNumeric)) {
              // Check if answers are very close (allowing for rounding errors)
              partiallyCorrect = Math.abs(studentNumeric - correctNumeric) < 0.001;
            }
          }
          
          explanation = isCorrect 
            ? "Korrekt svar!" 
            : partiallyCorrect 
              ? "NÃ¦sten korrekt. Der kan vÃ¦re en lille afrundingsfejl." 
              : `Ikke korrekt. Det rigtige svar er ${questionData.correctAnswer}.`;
          
          predictedGrade = isCorrect ? "12" : partiallyCorrect ? "7" : "00";
        } catch (error) {
          explanation = "Der opstod en fejl ved evaluering af dette matematikspÃ¸rgsmÃ¥l.";
          predictedGrade = "00";
        }
        break;
        
      case 'multiplechoice':
        // For multiple choice, we just compare the selected option
        isCorrect = questionData.studentAnswer.trim() === questionData.correctAnswer.trim();
        explanation = isCorrect 
          ? "Korrekt svar!" 
          : `Ikke korrekt. Det rigtige svar er "${questionData.correctAnswer}".`;
        predictedGrade = isCorrect ? "12" : "00";
        break;
        
      case 'trueFalse':
        // For true/false questions
        const normalizedStudentAnswer = questionData.studentAnswer.toLowerCase().trim();
        const normalizedCorrectAnswer = questionData.correctAnswer.toLowerCase().trim();
        
        isCorrect = (
          normalizedStudentAnswer === normalizedCorrectAnswer ||
          (normalizedStudentAnswer === "true" && normalizedCorrectAnswer === "ja") ||
          (normalizedStudentAnswer === "false" && normalizedCorrectAnswer === "nej") ||
          (normalizedStudentAnswer === "ja" && normalizedCorrectAnswer === "true") ||
          (normalizedStudentAnswer === "nej" && normalizedCorrectAnswer === "false")
        );
        
        explanation = isCorrect 
          ? "Korrekt svar!" 
          : `Ikke korrekt. Det rigtige svar er "${questionData.correctAnswer}".`;
        predictedGrade = isCorrect ? "12" : "00";
        break;
        
      case 'text':
        // For text questions, we need more sophisticated evaluation
        // This would ideally use text similarity or NLP techniques
        // Here we'll use a simple string inclusion check as a basic implementation
        const studentAnswerLower = questionData.studentAnswer.toLowerCase().trim();
        const correctAnswerLower = questionData.correctAnswer.toLowerCase().trim();
        
        // Check for exact match
        if (studentAnswerLower === correctAnswerLower) {
          isCorrect = true;
          explanation = "Perfekt svar!";
          predictedGrade = "12";
        } 
        // Check if student answer contains all key terms from correct answer
        else {
          const keyTerms = correctAnswerLower.split(/\s+/).filter(term => 
            term.length > 3 && !["and", "the", "for", "med", "eller", "og", "den", "det", "som"].includes(term)
          );
          
          const matchedTerms = keyTerms.filter(term => studentAnswerLower.includes(term));
          const matchRatio = keyTerms.length > 0 ? matchedTerms.length / keyTerms.length : 0;
          
          if (matchRatio >= 0.8) {
            partiallyCorrect = true;
            explanation = "Dit svar indeholder de vigtigste nÃ¸gleord, men er ikke helt prÃ¦cist.";
            predictedGrade = "10";
          } else if (matchRatio >= 0.5) {
            partiallyCorrect = true;
            explanation = "Dit svar indeholder nogle af de rigtige elementer, men mangler vigtige detaljer.";
            predictedGrade = "7";
          } else if (matchRatio >= 0.3) {
            partiallyCorrect = true;
            explanation = "Dit svar er delvist korrekt, men mangler vÃ¦sentlige elementer.";
            predictedGrade = "4";
          } else {
            explanation = "Dit svar matcher ikke det forventede svar.";
            predictedGrade = "00";
          }
        }
        break;
        
      default:
        explanation = "Ukendt spÃ¸rgsmÃ¥lstype";
        predictedGrade = "00";
    }

    return { isCorrect, partiallyCorrect, explanation, predictedGrade };
  };

  // Modify the calculateGradePrediction function to handle simple questions
  const calculateGradePrediction = (): GradePrediction => {
    // Check if we have question data for automatic grading
    if (assignment?.questionData) {
      const questionEvaluation = evaluateSimpleQuestion(assignment.questionData);
      
      return {
        predictedGrade: questionEvaluation.predictedGrade,
        confidence: 0.99, // High confidence for auto-graded questions
        range: { 
          min: questionEvaluation.predictedGrade, 
          max: questionEvaluation.predictedGrade 
        },
        rubricScores: {
          "Accuracy": { score: questionEvaluation.isCorrect ? 10 : questionEvaluation.partiallyCorrect ? 5 : 0, maxScore: 10, weight: 1.0 }
        },
        isAutomaticallyGraded: true,
        questionEvaluation: {
          isCorrect: questionEvaluation.isCorrect,
          partiallyCorrect: questionEvaluation.partiallyCorrect,
          explanation: questionEvaluation.explanation
        }
      };
    }

    // Original grade prediction logic for essays/assignments
    // Define rubric categories and weights for different subjects
    const defaultRubrics = {
      "Content": { weight: 0.30, maxScore: 10 }, 
      "Analysis": { weight: 0.25, maxScore: 10 },
      "Structure": { weight: 0.15, maxScore: 10 },
      "Language": { weight: 0.15, maxScore: 10 },
      "Formatting": { weight: 0.05, maxScore: 10 },
      "Citations": { weight: 0.10, maxScore: 10 }
    };
    
    // Subject-specific adjustments (could be expanded)
    const subjectAdjustments: Record<string, Record<string, number>> = {
      "Mathematics": { "Analysis": 0.35, "Content": 0.35, "Structure": 0.15, "Language": 0.10, "Formatting": 0.05, "Citations": 0.0 },
      "Literature": { "Analysis": 0.35, "Content": 0.25, "Structure": 0.15, "Language": 0.20, "Formatting": 0.05, "Citations": 0.0 },
      "Science": { "Analysis": 0.25, "Content": 0.25, "Structure": 0.15, "Language": 0.10, "Formatting": 0.05, "Citations": 0.20 },
      "History": { "Analysis": 0.30, "Content": 0.25, "Structure": 0.15, "Language": 0.10, "Formatting": 0.05, "Citations": 0.15 }
    };
    
    // Calculate rubric scores based on strengths and improvements
    const rubricScores: Record<string, { score: number; maxScore: number; weight: number }> = {};
    
    // Map our feedback categories to rubric categories
    const categoryMapping: Record<string, string> = {
      "Fagligt indhold": "Content",
      "Kritisk tÃ¦nkning": "Analysis",
      "Struktur": "Structure",
      "Sprog": "Language",
      "Praktisk anvendelse": "Content"
    };
    
    // Initialize rubric scores based on subject
    const subject = assignment?.subject || "General";
    const weights = subjectAdjustments[subject] || {};
    
    Object.entries(defaultRubrics).forEach(([rubric, {weight, maxScore}]) => {
      // Adjust weight if there's a subject-specific weight
      const adjustedWeight = weights[rubric] !== undefined ? weights[rubric] : weight;
      rubricScores[rubric] = { score: 0, maxScore, weight: adjustedWeight };
    });
    
    // Calculate scores for each rubric based on feedback strengths and improvements
    Object.entries(categoryScores).forEach(([category, data]) => {
      if (categoryMapping[category]) {
        const rubric = categoryMapping[category];
        if (rubricScores[rubric]) {
          // Use category score as basis, then apply sophisticated adjustments
          const baseScore = data.score / 10; // Convert percentage to 0-10 scale
          
          // Consider the ratio of strengths to total feedback in this category
          const strengthsCount = categorizedStrengths[category]?.length || 0;
          const improvementsCount = categorizedImprovements[category]?.length || 0;
          const totalCount = strengthsCount + improvementsCount;
          
          // Calculate a base score that's weighted by the ratio of strengths
          let score = 0;
          if (totalCount > 0) {
            score = (strengthsCount / totalCount) * rubricScores[rubric].maxScore;
          } else {
            // If no feedback in this category, assume middle score
            score = rubricScores[rubric].maxScore / 2;
          }
          
          // Apply further adjustments based on the quality and count of feedback
          if (strengthsCount > 3) score += 1; // Bonus for many strengths
          if (improvementsCount > 5) score -= 1; // Penalty for many improvements needed
          
          // Ensure score is within range
          score = Math.max(0, Math.min(score, rubricScores[rubric].maxScore));
          
          rubricScores[rubric].score = score;
        }
      }
    });
    
    // Calculate weighted score
    let weightedTotal = 0;
    let weightSum = 0;
    
    Object.values(rubricScores).forEach(({score, weight}) => {
      weightedTotal += score * weight;
      weightSum += weight;
    });
    
    // Normalize the score to account for weight sum not equaling 1
    const normalizedScore = weightSum > 0 ? weightedTotal / weightSum : 0;
    
    // Scale to Danish 7-step scale (-3, 00, 02, 4, 7, 10, 12)
    let predictedGrade: string;
    if (normalizedScore >= 9.5) predictedGrade = "12";
    else if (normalizedScore >= 8.0) predictedGrade = "10";
    else if (normalizedScore >= 6.5) predictedGrade = "7";
    else if (normalizedScore >= 5.0) predictedGrade = "4";
    else if (normalizedScore >= 3.0) predictedGrade = "02";
    else if (normalizedScore >= 1.0) predictedGrade = "00";
    else predictedGrade = "-3";
    
    // Calculate confidence based on amount and consistency of feedback
    const totalFeedbackItems = evaluation.strengths.length + evaluation.improvements.length;
    const categoryCount = Object.keys(categoryScores).length;
    
    // More feedback and more categories = higher confidence
    let confidence = Math.min(0.95, (0.70 + (totalFeedbackItems / 100) + (categoryCount / 20)));
    
    // Adjust for word count if available (longer assignments = more evidence = higher confidence)
    if (assignment?.wordCount) {
      if (assignment.wordCount > 2000) confidence = Math.min(0.95, confidence + 0.05);
      else if (assignment.wordCount < 500) confidence = Math.max(0.50, confidence - 0.10);
    }
    
    // Define grade range based on confidence
    // Convert grades to numbers for calculating range
    const gradeValues = ["-3", "00", "02", "4", "7", "10", "12"];
    const currentIndex = gradeValues.indexOf(predictedGrade);
    
    let minIndex = currentIndex;
    let maxIndex = currentIndex;
    
    if (confidence < 0.90) {
      minIndex = Math.max(0, currentIndex - 1);
      maxIndex = Math.min(gradeValues.length - 1, currentIndex + 1);
    } else if (confidence < 0.80) {
      minIndex = Math.max(0, currentIndex - 2);
      maxIndex = Math.min(gradeValues.length - 1, currentIndex + 1);
    }
    
    return {
      predictedGrade,
      confidence,
      range: { 
        min: gradeValues[minIndex], 
        max: gradeValues[maxIndex] 
      },
      rubricScores
    };
  };
  
  const gradePrediction = calculateGradePrediction();
  
  // Calculate match accuracy between predicted and actual grade
  const gradeMatchAccuracy = evaluation.grade === gradePrediction.predictedGrade
    ? 100
    : (gradePrediction.range.min <= evaluation.grade && evaluation.grade <= gradePrediction.range.max)
      ? 75
      : 0;

  // Render question evaluation UI if it's a simple question
  const renderQuestionEvaluation = () => {
    if (!assignment?.questionData || !gradePrediction.questionEvaluation) return null;
    
    const { questionData } = assignment;
    const { isCorrect, partiallyCorrect, explanation } = gradePrediction.questionEvaluation;

  return (
      <Card className="p-6 my-6 relative overflow-hidden">
        <div className={cn(
          "absolute top-0 left-0 w-full h-1.5",
          isCorrect ? "bg-green-500" : partiallyCorrect ? "bg-yellow-500" : "bg-red-500"
        )} />
        
        <div className="flex items-start space-x-4">
          <div className={cn(
            "flex-shrink-0 rounded-full p-2",
            isCorrect ? "bg-green-100 text-green-600" : 
            partiallyCorrect ? "bg-yellow-100 text-yellow-600" : 
            "bg-red-100 text-red-600"
          )}>
            {isCorrect ? (
              <CheckCircle className="w-6 h-6" />
            ) : partiallyCorrect ? (
              <AlertCircle className="w-6 h-6" />
            ) : (
              <AlertCircle className="w-6 h-6" />
            )}
          </div>
          
          <div className="space-y-3 flex-grow">
            <div>
              <h3 className="text-lg font-medium">{questionData.question}</h3>
              <div className="flex flex-col space-y-4 mt-4">
                <div>
                  <p className="text-sm text-gray-500">Dit svar:</p>
                  <p className="font-medium">{questionData.studentAnswer}</p>
                </div>
                
                <div>
                  <p className="text-sm text-gray-500">Korrekt svar:</p>
                  <p className={cn(
                    "font-medium",
                    isCorrect ? "text-green-600" : "text-gray-900"
                  )}>{questionData.correctAnswer}</p>
                </div>
                
                <div className={cn(
                  "p-3 rounded-lg",
                  isCorrect ? "bg-green-50 text-green-800" : 
                  partiallyCorrect ? "bg-yellow-50 text-yellow-800" : 
                  "bg-red-50 text-red-800"
                )}>
                  <p>{explanation}</p>
                </div>
                
                {questionData.explanation && (
                  <div className="bg-blue-50 p-3 rounded-lg text-blue-800">
                    <p className="text-sm font-semibold mb-1">Uddybende forklaring:</p>
                    <p>{questionData.explanation}</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </Card>
    );
  };

  return (
    <div className="space-y-6">
      {/* Show question evaluation first if it's a simple question */}
      {assignment?.questionData && renderQuestionEvaluation()}
      
      <Tabs 
        defaultValue="overview" 
        value={activeTab}
        onValueChange={setActiveTab}
        className="w-full"
        ref={tabsRef}
      >
        <TabsList className="grid grid-cols-3 mb-6">
          <TabsTrigger value="overview">Overblik</TabsTrigger>
          <TabsTrigger value="strengths">Styrker</TabsTrigger>
          <TabsTrigger value="improvements">Forbedringsmuligheder</TabsTrigger>
        </TabsList>
        
        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          {/* Grade Card */}
          <div className="relative">
            <div className="absolute inset-0 blur-3xl opacity-20" style={{ background: `var(--${gradeColor.bg})` }} />
            <Card className="p-6 backdrop-blur-sm bg-white/90 border-2 relative overflow-hidden">
              <div className={cn("absolute top-0 left-0 w-full h-1.5", gradeColor.bg)} />
              <div className="flex flex-col md:flex-row items-center justify-between">
                <div className="flex items-center mb-4 md:mb-0">
                  <div className={cn(
                    "flex items-center justify-center w-20 h-20 rounded-full",
                    gradeColor.bg,
                    "bg-opacity-10"
                  )}>
                    <span className={cn("text-5xl font-bold", gradeColor.text)}>
                      {evaluation.grade}
                    </span>
                  </div>
                  <div className="ml-4">
                    <h3 className="text-xl font-semibold text-gray-900">Din karakter</h3>
                    <p className={cn("text-sm font-medium", gradeColor.text)}>{gradeColor.description}</p>
                    
                    {/* Grade prediction accuracy */}
                    <div className="mt-2 flex items-center">
                      <div className={cn(
                        "h-2 w-2 rounded-full mr-2",
                        gradeMatchAccuracy === 100 ? "bg-green-500" : 
                        gradeMatchAccuracy === 75 ? "bg-yellow-500" : "bg-red-500"
                      )} />
                      <p className="text-xs text-gray-500">
                        {gradePrediction.isAutomaticallyGraded 
                          ? "Automatisk bedÃ¸mmelse"
                          : gradeMatchAccuracy === 100 
                            ? "Forudsigelse: 100% nÃ¸jagtig" 
                            : gradeMatchAccuracy === 75 
                              ? `Forudsigelse: inden for rÃ¦kkevidde (${gradePrediction.range.min}-${gradePrediction.range.max})` 
                              : "Forudsigelse: uden for rÃ¦kkevidde"}
                      </p>
                    </div>
                  </div>
                </div>
                <div className="w-full md:w-1/2">
                  <h4 className="text-sm font-medium text-gray-500 mb-2">Kategori-score</h4>
                  <div className="space-y-2">
                    {Object.entries(categoryScores).map(([category, { score }], index) => {
                      const categoryConfig = feedbackCategories[category];
                      if (!categoryConfig) return null;
                      
                      return (
                        <div key={index} className="flex items-center space-x-2">
                          {React.createElement(categoryConfig.icon, {
                            className: cn("w-4 h-4", categoryConfig.color)
                          })}
                          <div className="w-full">
                            <div className="flex justify-between text-xs mb-1">
                              <span>{category}</span>
                              <span>{score}%</span>
                            </div>
                            <Progress value={score} className="h-2" />
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </Card>
          </div>
          
          {/* Reasoning */}
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
              <Award className="w-5 h-5 mr-2 text-gray-500" />
              Begrundelse for karakteren
            </h3>
            <p className="text-gray-700 leading-relaxed">{evaluation.reasoning}</p>
          </Card>
          
          {/* Next Steps */}
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Target className="w-5 h-5 mr-2 text-gray-500" />
              Dine nÃ¦ste skridt
            </h3>
            <div className="space-y-4">
              {nextSteps.map((step, index) => {
                const Icon = step.icon;
                return (
                  <div
                    key={index}
                    className="flex items-start space-x-3"
                  >
                    <div className={cn(
                      "flex items-center justify-center w-8 h-8 rounded-full shrink-0 mt-0.5",
                      step.color.replace("text-", "bg-"),
                      "bg-opacity-20"
                    )}>
                      <span className="font-bold text-sm">{step.step}</span>
                    </div>
                    <div className="space-y-1">
                      <h4 className="font-medium text-gray-900">{step.category}</h4>
                      <p className="text-gray-700">{step.action}</p>
                    </div>
                  </div>
                );
              })}
              
              <div className="pt-2">
                <Button 
                  variant="outline" 
                  className="w-full border-purple-300 text-purple-700 hover:bg-purple-50 rounded-full py-6"
                  onClick={showAllImprovementsHandler}
                >
                  <ArrowRight className="w-5 h-5 mr-2" />
                  Se alle forbedringsmuligheder
                </Button>
              </div>
            </div>
          </Card>
        </TabsContent>
        
        {/* Strengths Tab */}
        <TabsContent value="strengths" className="space-y-6">
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <Sparkles className="w-5 h-5 mr-2 text-yellow-500" />
              Dine styrker
            </h3>
            
            <div className="relative">
              <div className="space-y-4">
                {Object.entries(categorizedStrengths).map(([category, items], categoryIndex) => (
                  items.length > 0 ? (
                    <div
                      key={category}
                      className="space-y-3"
                    >
                      <h4 className="font-medium text-gray-900 flex items-center">
                        {feedbackCategories[category]?.icon && 
                          React.createElement(feedbackCategories[category].icon, {
                            className: cn("w-5 h-5 mr-2", feedbackCategories[category].color)
                          })
                        }
                        {category}
                      </h4>
                      <div className="space-y-3">
                        {items.map((strength, index) => renderStrengthItem(strength, index))}
                      </div>
                    </div>
                  ) : null
                ))}
              </div>
              
              {!isPremium && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="absolute inset-0 bg-white/80 backdrop-blur-[2px]" />
                  <Button className="relative z-10" variant="outline">
                    <Lock className="mr-2 h-4 w-4" />
                    Se styrker med Premium
                  </Button>
                </div>
              )}
            </div>
          </Card>
        </TabsContent>

        {/* Improvements Tab */}
        <TabsContent value="improvements" className="space-y-6" data-value="improvements">
          {showAllImprovements && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-blue-50 p-4 rounded-lg mb-4 border border-blue-200"
            >
              <div className="flex items-start">
                <div className="bg-blue-100 p-2 rounded-full mr-3">
                  <TrendingUp className="h-5 w-5 text-blue-600" />
                </div>
                <div>
                  <h3 className="font-medium text-blue-900">Alle forbedringsmuligheder</h3>
                  <p className="text-blue-700 text-sm mt-1">
                    Her er en oversigt over alle forbedringsmuligheder for din opgave. 
                    Nedenfor kan du se detaljerede forslag til hvordan du kan forbedre din opgave.
                  </p>
                </div>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="ml-auto" 
                  onClick={() => setShowAllImprovements(false)}
                >
                  <ChevronDown className="h-4 w-4 transform rotate-180" />
                </Button>
              </div>
            </motion.div>
          )}
          
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
              <TrendingUp className="w-5 h-5 mr-2 text-blue-500" />
              Forbedringsmuligheder
            </h3>
            
            <div className="relative">
              <div className="space-y-6">
                {Object.entries(categorizedImprovements).map(([category, items], categoryIndex) => (
                  items.length > 0 ? (
                    <div
                      key={category}
                      className="space-y-3"
                    >
                      <h4 className="font-medium text-gray-900 flex items-center">
                        {feedbackCategories[category]?.icon && 
                          React.createElement(feedbackCategories[category].icon, {
                            className: cn("w-5 h-5 mr-2", feedbackCategories[category].color)
                          })
                        }
                        {category}
                        <span className="ml-2 text-sm text-gray-500">({items.length})</span>
                      </h4>
                      <div>
                        {items.map((improvement, index) => {
                          const uniqueId = `${category}-improvement-${index}`;
                          return (
                            <motion.div
                              key={uniqueId}
                              initial={{ opacity: 0, y: 10 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: 0.05 * index }}
                            >
                              <Collapsible
                                open={openItems[uniqueId]}
                                onOpenChange={() => toggleItem(uniqueId)}
                                className={cn(
                                  "rounded-lg overflow-hidden border mb-4",
                                  openItems[uniqueId] ? "shadow-md" : ""
                                )}
                              >
                                <CollapsibleTrigger className="w-full">
                                  <div className={cn(
                                    "flex items-center p-4",
                                    openItems[uniqueId] ? "border-b" : ""
                                  )}>
                                    <div className={cn(
                                      "shrink-0 p-2 mr-3 rounded-full",
                                      feedbackCategories[category]?.color.replace("text-", "bg-") || "bg-gray-200",
                                      "bg-opacity-20"
                                    )}>
                                      {feedbackCategories[category]?.icon && 
                                        React.createElement(feedbackCategories[category].icon, {
                                          className: cn("w-5 h-5", feedbackCategories[category]?.color || "text-gray-500")
                                        })
                                      }
                                    </div>
                                    <div className="text-left flex-grow">
                                      <h4 className="font-medium text-gray-900">{parseImprovement(improvement).description}</h4>
                                      <p className="text-sm text-gray-500 mt-1">Klik for at se konkrete forslag</p>
                                    </div>
                                    <ChevronDown
                                      className={cn(
                                        "h-5 w-5 shrink-0 text-gray-500 transition-transform duration-200 ml-2",
                                        openItems[uniqueId] ? "transform rotate-180" : ""
                                      )}
                                    />
                                  </div>
                                </CollapsibleTrigger>
                                <CollapsibleContent>
                                  <div className="p-4 space-y-4 bg-gray-50">
                                    {parseImprovement(improvement).citations.length > 0 && parseImprovement(improvement).citations.map((citation, citationIndex) => {
                                      // Get the corresponding suggestion or use a default
                                      const suggestion = parseImprovement(improvement).suggestions[citationIndex] || 
                                                        (parseImprovement(improvement).suggestions.length > 0 ? parseImprovement(improvement).suggestions[0] : "");
                                      
                                      return (
                                        <div key={citationIndex} className="border-b border-gray-200 pb-4 mb-4 last:border-0 last:pb-0 last:mb-0">
                                          <div className="space-y-2">
                                            <div className="flex items-center text-sm font-medium text-gray-500">
                                              <Highlighter className="w-4 h-4 mr-2" />
                                              Fra din tekst {parseImprovement(improvement).citations.length > 1 ? `(${citationIndex + 1}/${parseImprovement(improvement).citations.length})` : ''}:
                                            </div>
                                            <div className="bg-white rounded-md p-3 text-gray-700 border border-gray-200 italic">
                                              "{citation}"
                                            </div>
                                          </div>
                                          
                                          {suggestion && (
                                            <div className="space-y-2 mt-3">
                                              <div className="flex items-center text-sm font-medium text-gray-500">
                                                <Pencil className="w-4 h-4 mr-2" />
                                                Forslag til forbedring:
                                              </div>
                                              <div className={cn(
                                                "rounded-md p-3 font-medium border",
                                                feedbackCategories[category]?.bgColor || "bg-gray-50",
                                                feedbackCategories[category]?.color || "text-gray-700",
                                                "border-current border-opacity-20"
                                              )}>
                                                "{suggestion}"
                                              </div>
                                            </div>
                                          )}
                                        </div>
                                      );
                                    })}
                                    
                                    {parseImprovement(improvement).citations.length === 0 && parseImprovement(improvement).suggestions.length > 0 && (
                                      <div className="space-y-2">
                                        <div className="flex items-center text-sm font-medium text-gray-500">
                                          <Pencil className="w-4 h-4 mr-2" />
                                          Forslag til forbedring:
                                        </div>
                                        <div className={cn(
                                          "rounded-md p-3 font-medium border",
                                          feedbackCategories[category]?.bgColor || "bg-gray-50",
                                          feedbackCategories[category]?.color || "text-gray-700",
                                          "border-current border-opacity-20"
                                        )}>
                                          "{parseImprovement(improvement).suggestions[0]}"
                                        </div>
                                      </div>
                                    )}
                                    
                                    {parseImprovement(improvement).explanation && (
                                      <div className="space-y-2 mt-2">
                                        <div className="flex items-center text-sm font-medium text-gray-500">
                                          <Zap className="w-4 h-4 mr-2" />
                                          Hvorfor det forbedrer din opgave:
                                        </div>
                                        <div className="bg-white rounded-md p-3 text-gray-700 border border-gray-200">
                                          {parseImprovement(improvement).explanation}
                                        </div>
                                      </div>
                                    )}
                                    
                                    <div className="pt-2">
                                      <Button 
                                        variant="outline" 
                                        size="sm"
                                        className="w-full text-gray-600 hover:text-gray-900 hover:bg-gray-100"
                                        onClick={(e) => {
                                          e.stopPropagation();
                                          // Copy all suggestions separated by newlines if there are multiple
                                          const textToCopy = parseImprovement(improvement).suggestions.length > 1 
                                            ? parseImprovement(improvement).suggestions.join('\n\n')
                                            : parseImprovement(improvement).suggestions[0] || "";
                                          navigator.clipboard.writeText(textToCopy);
                                        }}
                                      >
                                        <Clipboard className="w-4 h-4 mr-2" />
                                        KopiÃ©r {parseImprovement(improvement).suggestions.length > 1 ? 'alle forslag' : 'forslag'}
                                      </Button>
                                    </div>
                                  </div>
                                </CollapsibleContent>
                              </Collapsible>
                            </motion.div>
                          );
                        })}
                      </div>
                    </div>
                  ) : null
                ))}
              </div>
              
              {!isPremium && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="absolute inset-0 bg-white/80 backdrop-blur-[2px]" />
                  <Button className="relative z-10" variant="outline">
                    <Lock className="mr-2 h-4 w-4" />
                    Se forbedringsmuligheder med Premium
                  </Button>
                </div>
              )}
            </div>
          </Card>
        </TabsContent>
      </Tabs>

      {!isPremium && (
        <div className="text-center">
          <Button className="w-full sm:w-auto" variant="default">
            <Lock className="mr-2 h-4 w-4" />
            Opgrader til Premium - 79 kr./mÃ¥ned
          </Button>
        </div>
      )}
    </div>
  );
};

export default EvaluationResult;
